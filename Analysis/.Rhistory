print(b)
sample1 <-
data.frame(Predicted = c(rep("1",    6 + 0),
rep("0",   1 + 0)),
Actual    = c(rep(c("1", "0"), times = c(7, 0)),
rep(c("1", "0"), times = c(0, 0))),
stringsAsFactors = FALSE)
sample2 <-
data.frame(Predicted = c(rep("1",    6 + 0),
rep("0",   1 + 0)),
Actual    = c(rep(c("1", "0"), times = c(7, 0)),
rep(c("1", "0"), times = c(0, 0))),
stringsAsFactors = FALSE)
table(Sample)
computeFscorediff<-function(data,indices){
sample<-data[indices,]
p1<-(sum(sample1$Predicted)/sum(sample1$Predicted))
p2<-(sum(sample2$Predicted)/sum(sample2$Predicted))
r1<-(sum(sample1$Predicted)/sum(sample1$Actual - Sample1$Predicted))
r2<-(sum(sample2$Predicted)/sum(sample2$Actual - Sample2$Predicted))
fscore1<-(2*p1*r1/(p1+r1))
fscore2<-(2*p2*r2/(p2+r2))
(fscore1-fscore2)}
b<-boot(Mapping,computeFscorediff,10000)
print(b)
sample1 <-
data.frame(Predicted = c(rep("1",    6 + 0),
rep("0",   1 + 0)),
Actual    = c(rep(c("1", "0"), times = c(7, 0)),
rep(c("1", "0"), times = c(0, 0))),
as.numeric = TRUE)
sample2 <-
data.frame(Predicted = c(rep("1",    6 + 0),
rep("0",   1 + 0)),
Actual    = c(rep(c("1", "0"), times = c(7, 0)),
rep(c("1", "0"), times = c(0, 0))),
as.numeric = TRUE)
computeFscorediff<-function(data,indices){
sample<-data[indices,]
p1<-(sum(sample1$Predicted)/sum(sample1$Predicted))
p2<-(sum(sample2$Predicted)/sum(sample2$Predicted))
r1<-(sum(sample1$Predicted)/sum(sample1$Actual - Sample1$Predicted))
r2<-(sum(sample2$Predicted)/sum(sample2$Actual - Sample2$Predicted))
fscore1<-(2*p1*r1/(p1+r1))
fscore2<-(2*p2*r2/(p2+r2))
(fscore1-fscore2)}
b<-boot(Mapping,computeFscorediff,10000)
print(b)
sample1 <-  as.numeric(sample5)
sample5 <-
data.frame(Predicted = c(rep("1",    6 + 0),
rep("0",   1 + 0)),
Actual    = c(rep(c("1", "0"), times = c(7, 0)),
rep(c("1", "0"), times = c(0, 0))),
stringsAsFactors = FALSE)
sample1 <-  as.numeric(sample5)
sample1 <-  as.numeric(sample5[,])
sample1 <-
as.numeric(data.frame(Predicted = c(rep("1",    6 + 0),
rep("0",   1 + 0)),
Actual    = c(rep(c("1", "0"), times = c(7, 0)),
rep(c("1", "0"), times = c(0, 0))),
stringsAsFactors = FALSE))
sample1 <-
data.frame(as.numeric(Predicted = c(rep("1",    6 + 0),
rep("0",   1 + 0)),
Actual    = c(rep(c("1", "0"), times = c(7, 0)),
rep(c("1", "0"), times = c(0, 0))),
stringsAsFactors = FALSE))
sample1 <-
as.numeric(as.character( data.frame(Predicted = c(rep("1",    6 + 0),
rep("0",   1 + 0)),
Actual    = c(rep(c("1", "0"), times = c(7, 0)),
rep(c("1", "0"), times = c(0, 0))),
stringsAsFactors = FALSE)))
sample5 <- as.numeric(as.character(sample1)
View(computeFscorediff)
sample1 <-
data.frame(Predicted = c(rep(1,    6 + 0),
rep(0,   1 + 0)),
Actual    = c(rep(c(1, "0), times = c(7, 0)),
rep(c(1, 0), times = c(0, 0))),
stringsAsFactors = FALSE)
sample1 <-
data.frame(Predicted = c(rep(1,    6 + 0),
rep(0,   1 + 0)),
Actual    = c(rep(c(1, 0), times = c(7, 0)),
rep(c(1, 0), times = c(0, 0))),
stringsAsFactors = FALSE)
sample2 <-
data.frame(Predicted = c(rep(1,    6 + 0),
rep(0,   1 + 0)),
Actual    = c(rep(c(1, 0), times = c(7, 0)),
rep(c(1, 0), times = c(0, 0))),
stringsAsFactors = FALSE)
computeFscorediff<-function(data,indices){
sample<-data[indices,]
p1<-(sum(sample1$Predicted)/sum(sample1$Predicted))
p2<-(sum(sample2$Predicted)/sum(sample2$Predicted))
r1<-(sum(sample1$Predicted)/sum(sample1$Actual - Sample1$Predicted))
r2<-(sum(sample2$Predicted)/sum(sample2$Actual - Sample2$Predicted))
fscore1<-(2*p1*r1/(p1+r1))
fscore2<-(2*p2*r2/(p2+r2))
(fscore1-fscore2)}
b<-boot(Mapping,computeFscorediff,10000)
print(b)
View(Sample)
b<-boot(Mapping,computeFscorediff,10000)
print(b)
# Nonparametric Bootstrap Confidence Intervals -  the basic bootstrap interval
conf<-boot.ci(boot.out=b,type=c("basic"))
print(conf)
b.under.H0 <- b$t - mean(b$t)
p<-mean(abs(b.under.H0) >= abs(b$t0))
conf$basic
pval<-c(pval,p)
cil<-c(cil,conf$basic[4])
ciu<-c(ciu,conf$basic[5])
remove(b,b.under.H0)
}
}
plot<-data.frame(x,y,pval,cil,ciu)
plot$x<-as.factor(plot$x)
plot$y<-as.factor(plot$y)
write.csv(plot,file="3.bootstrap_pvalue.csv")
library(ggplot2)
conf<-boot.ci(boot.out=b,type=c("basic"))
print(conf)
b.under.H0 <- b$t - mean(b$t)
p<-mean(abs(b.under.H0) >= abs(b$t0))
conf$basic
pval<-c(pval,p)
cil<-c(cil,conf$basic[4])
ciu<-c(ciu,conf$basic[5])
remove(b,b.under.H0)
}
}
plot<-data.frame(x,y,pval,cil,ciu)
plot$x<-as.factor(plot$x)
plot$y<-as.factor(plot$y)
write.csv(plot,file="3.bootstrap_pvalue.csv")
print(b)
b<-boot(Mapping,computeFscorediff,10000)
View(Sample)
View(Sample)
rm(list = setdiff(ls(), lsf.str()))
View(computeFscorediff)
View(computeFscorediff)
library(caret)
library(boot)
library(ggplot2)
sample1 <-
data.frame(Predicted = c(rep(1,    6 + 0),
rep(0,   1 + 0)),
Actual    = c(rep(c(1, 0), times = c(7, 0)),
rep(c(1, 0), times = c(0, 0))),
stringsAsFactors = FALSE)
sample2 <-
data.frame(Predicted = c(rep(1,    6 + 0),
rep(0,   1 + 0)),
Actual    = c(rep(c(1, 0), times = c(7, 0)),
rep(c(1, 0), times = c(0, 0))),
stringsAsFactors = FALSE)
rm(list = setdiff(ls(), lsf.str()))
sample <-
data.frame(Predicted1 = c(rep(1,    6 + 0),
rep(0,   1 + 0)),
Actual1    = c(rep(c(1, 0), times = c(7, 0)),
rep(c(1, 0), times = c(0, 0))),
Predicted2 = c(rep(1,    6 + 0),
rep(0,   1 + 0)),
Actual2    = c(rep(c(1, 0), times = c(7, 0)),
rep(c(1, 0), times = c(0, 0))),
stringsAsFactors = FALSE)
computeFscorediff<-function(data,indices){
sample<-data[indices,]
p1<-(sum(sample$Predicted1)/sum(sample$Predicted1))
p2<-(sum(sample$Predicted2)/sum(sample$Predicted2))
r1<-(sum(sample$Predicted1)/sum(sample$Actual1 - sample$Predicted1))
r2<-(sum(sample$Predicted2)/sum(sample$Actual2 - sample$Predicted2))
fscore1<-(2*p1*r1/(p1+r1))
fscore2<-(2*p2*r2/(p2+r2))
(fscore1-fscore2)}
b<-boot(sample,computeFscorediff,10000)
print(b)
computeFscorediff<-function(data,indices){
sample<-data[indices,]
p1<-(sum(sample$Predicted1)/sum(sample$Predicted1))
p2<-(sum(sample$Predicted2)/sum(sample$Predicted2))
r1<-(sum(sample$Predicted1)/sum(sample$Actual - sample$Predicted1))
r2<-(sum(sample$Predicted2)/sum(sample$Actual - sample$Predicted2))
fscore1<-(2*p1*r1/(p1+r1))
fscore2<-(2*p2*r2/(p2+r2))
(fscore1-fscore2)}
sample <-
data.frame(Predicted1 = c(rep(1,    50 + 0),
rep(0,   1 + 0)),
Actual    = c(rep(c(1, 0), times = c(100, 0)),
rep(c(1, 0), times = c(0, 0))),
Predicted2 = c(rep(1,    6 + 0),
rep(0,   1 + 0)),
stringsAsFactors = FALSE)
sample <-
data.frame(Predicted1 = c(rep(1,    50 + 0),
rep(0,   50 + 0)),
Actual    = c(rep(c(1, 0), times = c(100, 0)),
rep(c(1, 0), times = c(0, 0))),
Predicted2 = c(rep(1,    20 + 0),
rep(0,   80 + 0)),
stringsAsFactors = FALSE)
View(sample)
View(sample)
sample <-
data.frame(Predicted1 = c(rep(1,    50 + 0),
rep(0,   50 + 0)),
Actual    = c(rep(c(1, 0), times = c(100, 0)),
rep(c(1, 0), times = c(0, 0))),
Predicted2 = c(rep(1,    20 + 0),
rep(0,   80 + 0)),
stringsAsFactors = FALSE)
computeFscorediff<-function(data,indices){
sample<-data[indices,]
p1<-(sum(sample$Predicted1)/sum(sample$Predicted1))
p2<-(sum(sample$Predicted2)/sum(sample$Predicted2))
r1<-(sum(sample$Predicted1)/sum(sample$Actual - sample$Predicted1))
r2<-(sum(sample$Predicted2)/sum(sample$Actual - sample$Predicted2))
fscore1<-(2*p1*r1/(p1+r1))
fscore2<-(2*p2*r2/(p2+r2))
(fscore1-fscore2)}
b<-boot(sample,computeFscorediff,10000)
print(b)
# Nonparametric Bootstrap Confidence Intervals -  the basic bootstrap interval
conf<-boot.ci(boot.out=b,type=c("basic"))
print(conf)
b.under.H0 <- b$t - mean(b$t)
p<-mean(abs(b.under.H0) >= abs(b$t0))
conf$basic
pval<-c(pval,p)
cil<-c(cil,conf$basic[4])
ciu<-c(ciu,conf$basic[5])
remove(b,b.under.H0)
}
}
plot<-data.frame(x,y,pval,cil,ciu)
plot$x<-as.factor(plot$x)
plot$y<-as.factor(plot$y)
write.csv(plot,file="3.bootstrap_pvalue.csv")
pval<-numeric()
cil<-numeric()
ciu<-numeric()
x<-factor()
y<-factor()
# Nonparametric Bootstrap Confidence Intervals -  the basic bootstrap interval
conf<-boot.ci(boot.out=b,type=c("basic"))
print(conf)
b.under.H0 <- b$t - mean(b$t)
p<-mean(abs(b.under.H0) >= abs(b$t0))
conf$basic
pval<-c(pval,p)
cil<-c(cil,conf$basic[4])
ciu<-c(ciu,conf$basic[5])
remove(b,b.under.H0)
}
}
plot<-data.frame(x,y,pval,cil,ciu)
plot$x<-as.factor(plot$x)
plot$y<-as.factor(plot$y)
write.csv(plot,file="3.bootstrap_pvalue.csv")
pval<-numeric()
cil<-numeric()
ciu<-numeric()
x<-factor()
y<-factor()
# Nonparametric Bootstrap Confidence Intervals -  the basic bootstrap interval
conf<-boot.ci(boot.out=b,type=c("basic"))
print(conf)
b.under.H0 <- b$t - mean(b$t)
p<-mean(abs(b.under.H0) >= abs(b$t0))
conf$basic
pval<-c(pval,p)
cil<-c(cil,conf$basic[4])
ciu<-c(ciu,conf$basic[5])
remove(b,b.under.H0)
plot<-data.frame(x,y,pval,cil,ciu)
plot$x<-as.factor(plot$x)
plot$y<-as.factor(plot$y)
write.csv(plot,file="3.bootstrap_pvalue.csv")
conf<-boot.ci(boot.out=b,type=c("basic"))
print(conf)
print(b)
b<-boot(sample,computeFscorediff,10000)
print(b)
conf<-boot.ci(boot.out=b,type=c("basic"))
print(conf)
b.under.H0 <- b$t - mean(b$t)
p<-mean(abs(b.under.H0) >= abs(b$t0))
conf$basic
pval<-c(pval,p)
cil<-c(cil,conf$basic[4])
ciu<-c(ciu,conf$basic[5])
remove(b,b.under.H0)
plot<-data.frame(x,y,pval,cil,ciu)
plot$x<-as.factor(plot$x)
plot$y<-as.factor(plot$y)
write.csv(plot,file="3.bootstrap_pvalue.csv")
b<-boot(sample,computeFscorediff,10000)
print(b)
conf<-boot.ci(boot.out=b,type=c("basic"))
print(conf)
b.under.H0 <- b$t - mean(b$t)
p<-mean(abs(b.under.H0) >= abs(b$t0))
conf$basic
image1<-ggplot(plot, aes(y=x, x=y, label=pval, fill=pval)) + geom_tile() + geom_text()
image1
ggsave(filename="4.Plot.png", plot=image1)
plot$significance<-cut(plot$pval,c(0,0.0167,1),include.lowest = TRUE,labels=c("significant","not significant"))
image2<-ggplot(plot, aes(y=x, x=y, fill=significance))  +geom_tile()+scale_fill_manual(values = c("orange", "green"))
image2
ggsave(filename="5.Plot_2colored.png", plot=image2)
b<-boot(sample,computeFscorediff,10000)
print(b)
#Enter results into here or load file csv in this format as sample.
sample <-
data.frame(Predicted1 = c(rep(1,    50 + 0),
rep(0,   50 + 0)),
Actual    = c(rep(c(1, 0), times = c(100, 0)),
rep(c(1, 0), times = c(0, 0))),
Predicted2 = c(rep(1,    60 + 0),
rep(0,   40 + 0)),
stringsAsFactors = FALSE)
b<-boot(sample,computeFscorediff,10000)
print(b)
#Enter results into here or load file csv in this format as sample.
sample <-
data.frame(Predicted1 = c(rep(1,    50 + 0),
rep(0,   50 + 0)),
Actual    = c(rep(c(1, 0), times = c(100, 0)),
rep(c(1, 0), times = c(0, 0))),
Predicted2 = c(rep(1,    50 + 0),
rep(0,   50 + 0)),
stringsAsFactors = FALSE)
b<-boot(sample,computeFscorediff,10000)
print(b)
source('C:/Users/Jason/UNSW/Jitendra Jonnagaddala - 15. ePBRN-OMOP-Vocab-Map/7. AMT HIC 2018 Study/2. AMT Study/Experiments/Results/Analysis/R Bootstrap.R', echo=TRUE)
conf<-boot.ci(boot.out=b,type=c("basic"))
print(conf)
#Enter results into here or load file csv in this format as sample.
sample <-
data.frame(Predicted1 = c(rep(1,    50 + 0),
rep(0,   50 + 0)),
Actual    = c(rep(c(1, 0), times = c(100, 0)),
rep(c(1, 0), times = c(0, 0))),
Predicted2 = c(rep(1,    60 + 0),
rep(0,   40 + 0)),
stringsAsFactors = FALSE)
b<-boot(sample,computeFscorediff,10000)
print(b)
conf<-boot.ci(boot.out=b,type=c("basic"))
print(conf)
b.under.H0 <- b$t - mean(b$t)
p<-mean(abs(b.under.H0) >= abs(b$t0))
conf$basic
pval<-c(pval,p)
cil<-c(cil,conf$basic[4])
ciu<-c(ciu,conf$basic[5])
plot<-data.frame(x,y,pval,cil,ciu)
plot$x
print(p)
ciu<-numeric()
source('C:/Users/Jason/UNSW/Jitendra Jonnagaddala - 15. ePBRN-OMOP-Vocab-Map/7. AMT HIC 2018 Study/2. AMT Study/Experiments/Results/Analysis/R Bootstrap.R', echo=TRUE)
b<-boot(sample,computeFscorediff,10000)
print(b)
# Nonparametric Bootstrap Confidence Intervals -  the basic bootstrap interval
conf<-boot.ci(boot.out=b,type=c("basic"))
print(conf)
b.under.H0 <- b$t - mean(b$t)
p<-mean(abs(b.under.H0) >= abs(b$t0))
conf$basic
sample <-
data.frame(Predicted1 = c(rep(1,    141 + 0),
rep(0,   7 + 0)),
Actual    = c(rep(c(1, 0), times = c(158, 0)),
rep(c(1, 0), times = c(0, 0))),
Predicted2 = c(rep(1,    62 + 0),
rep(0,   86 + 0)),
stringsAsFactors = FALSE)
#Enter results into here or load file csv in this format as sample.
sample <-
data.frame(Predicted1 = c(rep(1,    141 + 0),
rep(0,   7 + 0)),
Actual    = c(rep(c(1, 0), times = c(148, 0)),
rep(c(1, 0), times = c(0, 0))),
Predicted2 = c(rep(1,    62 + 0),
rep(0,   86 + 0)),
stringsAsFactors = FALSE)
b<-boot(sample,computeFscorediff,10000)
print(b)
conf<-boot.ci(boot.out=b,type=c("basic"))
print(conf)
b.under.H0 <- b$t - mean(b$t)
p<-mean(abs(b.under.H0) >= abs(b$t0))
conf$basic
print(p)
b.under.H0 <- b$t - mean(b$t)
p<-mean(abs(b.under.H0) >= abs(b$t0))
conf$basic
b<-boot(sample,computeFscorediff,10000)
print(b)
View(b)
View(b.under.H0)
View(sample)
computeFscorediff<-function(data,indices){
sample<-data[indices,]
p1<-(sum(sample$Predicted1)/sum(sample$Predicted1))
p2<-(sum(sample$Predicted2)/sum(sample$Predicted2))
r1<-(sum(sample$Predicted1)/sum(sample$Actual - sample$Predicted1))
r2<-(sum(sample$Predicted2)/sum(sample$Actual - sample$Predicted2))
fscore1<-(2*p1*r1/(p1+r1))
fscore2<-(2*p2*r2/(p2+r2))
(fscore1-fscore2)}
b<-boot(sample,computeFscorediff,10000)
print(b)
View(b)
#Enter results into here or load file csv in this format as sample.
sample <-
data.frame(Predicted1 = c(rep(1,    141 + 0),
rep(0,   7 + 0)),
Actual    = c(rep(c(1, 0), times = c(148, 0)),
rep(c(1, 0), times = c(0, 0))),
Predicted2 = c(rep(1,    141 + 0),
rep(0,   7 + 0)),
stringsAsFactors = FALSE)
b<-boot(sample,computeFscorediff,10000)
print(b)
conf<-boot.ci(boot.out=b,type=c("basic"))
print(conf)
b.under.H0 <- b$t - mean(b$t)
p<-mean(abs(b.under.H0) >= abs(b$t0))
conf$basic
print(p)
CLEAR all()
remove(ALL)
setwd("E:/UNSW/UNSW/Jitendra Jonnagaddala - 15. ePBRN-OMOP-Vocab-Map/7. AMT HIC 2018 Study/2. AMT Study/Results/Analysis")
##PLots and graphs from here
# Plot pairwise comparisons block and color by significance level
# https://stackoverflow.com/questions/8391783/visualize-critical-values-pairwise-comparisons-from-posthoc-tukey-in-r
# https://stackoverflow.com/questions/33644034/how-to-visualize-pairwise-comparisons-with-ggplot2
# https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf
plot<-read.csv("pvalue_combined_excluded_c02.csv",header=TRUE,sep=",")
#Simple matrix image
image1<-ggplot(plot, aes(y=x, x=y, label=pval, fill=pval)) + geom_tile() + geom_text()+ labs(x="ATC Class", y="") + theme( axis.text.y = element_blank(), axis.line.y = element_blank(), axis.ticks.y = element_blank())
image1
ggsave(filename="4.Plot.png", plot=image1)
#Using the Bonferroni correction for 15 comparisons from 6 runs, the p value has to be below 0.05/15 = 0.0167
plot$significance<-cut(plot$pval,c(0,0.0167,1),include.lowest = TRUE,labels=c("significant","not significant"))
image2<-ggplot(plot, aes(y=x, x=y, fill=significance)) + theme( axis.text.y = element_blank(), axis.line.y = element_blank(), axis.ticks.y = element_blank())  +geom_tile()+scale_fill_manual(values = c("orange", "green")) + labs(x="ATC Class", y="")
image2
ggsave(filename="5.Plot_2colored.png", plot=image2)
# The below graph will look something like below - https://i.stack.imgur.com/vs5yx.png
# Here the diff i refer to represent the original difference between F measures, i think it should be in basic$ else just use the original compute Fscore function.
plot$RunXvsRunY<-rownames(plot)
plot
image4 <-ggplot(plot, aes(colour=cut(plot$pval,c(0,0.05,1),include.lowest = TRUE, label=c("Sig","Non-Sig")))) +
geom_hline(yintercept=0, lty="11", colour="grey30") +
geom_errorbar(aes(plot$y, ymin=cil, ymax=ciu), width=0.2) +
geom_point(aes(plot$y, plot$point)) + labs(colour="Significance", x="ATC Class", y="Difference in F1-measure")
image4
ggsave(filename="7.Plot.errorbar.png", plot=image4)
## Example 2: based on an example from the wikipedia page:
# https://en.wikipedia.org/wiki/Confusion_matrix
library(boot)
library(ggplot2)
pval<-numeric()
cil<-numeric()
ciu<-numeric()
x<-factor()
y<-factor()
##PLots and graphs from here
# Plot pairwise comparisons block and color by significance level
# https://stackoverflow.com/questions/8391783/visualize-critical-values-pairwise-comparisons-from-posthoc-tukey-in-r
# https://stackoverflow.com/questions/33644034/how-to-visualize-pairwise-comparisons-with-ggplot2
# https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf
plot<-read.csv("pvalue_combined_excluded_c02.csv",header=TRUE,sep=",")
#Simple matrix image
image1<-ggplot(plot, aes(y=x, x=y, label=pval, fill=pval)) + geom_tile() + geom_text()+ labs(x="ATC Class", y="") + theme( axis.text.y = element_blank(), axis.line.y = element_blank(), axis.ticks.y = element_blank())
image1
ggsave(filename="4.Plot.png", plot=image1)
#Using the Bonferroni correction for 15 comparisons from 6 runs, the p value has to be below 0.05/15 = 0.0167
plot$significance<-cut(plot$pval,c(0,0.0167,1),include.lowest = TRUE,labels=c("significant","not significant"))
image2<-ggplot(plot, aes(y=x, x=y, fill=significance)) + theme( axis.text.y = element_blank(), axis.line.y = element_blank(), axis.ticks.y = element_blank())  +geom_tile()+scale_fill_manual(values = c("orange", "green")) + labs(x="ATC Class", y="")
image2
ggsave(filename="5.Plot_2colored.png", plot=image2)
# The below graph will look something like below - https://i.stack.imgur.com/vs5yx.png
# Here the diff i refer to represent the original difference between F measures, i think it should be in basic$ else just use the original compute Fscore function.
plot$RunXvsRunY<-rownames(plot)
plot
image4 <-ggplot(plot, aes(colour=cut(plot$pval,c(0,0.05,1),include.lowest = TRUE, label=c("Sig","Non-Sig")))) +
geom_hline(yintercept=0, lty="11", colour="grey30") +
geom_errorbar(aes(plot$y, ymin=cil, ymax=ciu), width=0.2) +
geom_point(aes(plot$y, plot$point)) + labs(colour="Significance", x="ATC Class", y="Difference in F1-measure")
image4
ggsave(filename="7.Plot.errorbar.png", plot=image4)
# The below graph will look something like below - https://i.stack.imgur.com/vs5yx.png
# Here the diff i refer to represent the original difference between F measures, i think it should be in basic$ else just use the original compute Fscore function.
plot$RunXvsRunY<-rownames(plot)
plot
image4 <-ggplot(plot, aes(colour=cut(plot$pval,c(0,0.05,1),include.lowest = TRUE, label=c("Sig","Non-Sig")))) +
geom_hline(yintercept=0, lty="11", colour="grey30") +
geom_errorbar(aes(plot$y, ymin=cil, ymax=ciu), width=0.2) +
geom_point(aes(plot$y, plot$point)) + labs(colour="Significance", x="ATC Group", y="Difference in F1-measure")
image4
ggsave(filename="7.Plot.errorbar.png", plot=image4)
